# –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
# + –ò—â–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
# + –í—Ö–æ–¥ –Ω–∞ –ø–µ—Ä–µ–≥–∏–±–µ –º–∞_5–º
# + –ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ºa_30–º


from flask import Flask, render_template, request, jsonify
from binance.um_futures import UMFutures
import pandas as pd
import numpy as np
import time
from datetime import datetime
from pytz import timezone
import requests
import keys
import logging
import json, os, signal

app = Flask(__name__)

BOT_NAME = 'üìà_V3'
SYMBOL = 'ARCUSDT'
WINDOW_MA = 50 # –æ–∫–Ω–æ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ MA 5 –º–∏–Ω
WINDOW_MA_30 = 50 # –æ–∫–Ω–æ –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ MA 30 –º–∏–Ω
TREND_THRESHOLD = 0.9990 # –ø–æ—Ä–æ–≥ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
TREND_THRESHOLD_30m = 1 # –ø–æ—Ä–æ–≥ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ 30–º –ø–µ—Ä–µ–¥ —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞
PAUSE_BETWEEN_GET_DATA_IN_POSITION = 10 # –ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
TP_1_PROC = 2.5 #  —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
TP_2_PROC = 2.5 
TP_3_PROC = 2.5
TP_4_PROC = 2.5
STOP_LOSS_PROC = 0.2   #  —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
POS_SIZE = 2000.0 # —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω–µ—Ç–∞—Ö
ZONE = timezone('Europe/Moscow') # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
Bot = True

def start_logging(Bot_name):
    """
    Bot_name - –∏–º—è –±–æ—Ç–∞ - str
    """
    logger = logging.getLogger(Bot_name)
    logger.setLevel(logging.DEBUG)
    fh = logging.FileHandler('bot.log')
    fh.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(fh)
    return logger

logger = start_logging(BOT_NAME) # —Å—Ç–∞—Ä—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è


def connecting_to_market():
    try:
        client_alex = UMFutures(keys.api_key, keys.secret_key)
        result_alex = f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ client_alex –∫ –±–∏—Ä–∂–µ –≤—ã–ø–æ–ª–µ–Ω–æ.'
    except:
        result_alex = f'client_alex: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∏—Ä–∂–µ.' 

    try:
        client_den = UMFutures(keys.api_key_den, keys.secret_key_den)
        result_den = f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ client_den –∫ –±–∏—Ä–∂–µ –≤—ã–ø–æ–ª–µ–Ω–æ.'
    except:
        result_den = f'client_den: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∏—Ä–∂–µ.'

    return client_alex, result_alex, client_den, result_den

clients = connecting_to_market()
client, client_den = clients[0], clients[2]


def send_tg_message(text):
    requests.post(
    'https://api.telegram.org/' +
    'bot{}/sendMessage'.format(keys.TOKEN_tlg_bot), 
    params=dict(chat_id=keys.chat_id_tlg, text=text)
    )
    requests.post(
    'https://api.telegram.org/' +
    'bot{}/sendMessage'.format(keys.TOKEN_tlg_bot_den), 
    params=dict(chat_id=keys.chat_id_tlg_den, text=text)
    )

def get_klines(symbol, interval, lookback):
    max_retries = 3  # –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    for _ in range(max_retries):
        try:
            klines = pd.DataFrame(client_den.klines(symbol, interval,  limit = lookback))
            klines.columns=['open_time', 'open', 'high', 'low', 'close', 'volume', 'Kline_close_time', 'Quote_asset_volume',
               'Number_of_trades', 'Taker_buy_base_asset_volume', 'Taker_buy_quote_asset_volume', 'ignore']
            klines = klines.iloc[:, :6]
            klines['open_time'] = pd.to_datetime(klines['open_time'], unit='ms')
            float_columns = ['open', 'high', 'low', 'close', 'volume']
            klines[float_columns] = klines[float_columns].astype('float')
            klines['sma'] = klines['close'].rolling(window = WINDOW_MA).mean()
            klines['trend'] =  np.where((klines['sma'].iloc[-1] / klines['sma'].iloc[-2]) >= 1, 1, 0)
            klines['trend_power'] =  klines['sma']/klines['sma'].shift()
            return klines
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π: {str(e)}, –≤—Ä–µ–º—è: {get_time()}")
            time.sleep(60)
    raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")

def get_time():
    t = datetime.now(ZONE).strftime('%Y-%m-%d__%H-%M-%S')
    return t

def start_next_5m_kline():
    num_sec = 310 - (time.localtime().tm_min % 5) * 60 - time.localtime().tm_sec
    return num_sec

def send_limit_order_buy(simbol_, price_, pos_size_):
    '''—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º
       price_ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
       POS_SIZE: float, –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    '''
    order_alex = client.new_order(symbol = simbol_, side = 'BUY', type = 'LIMIT', price = round((price_ * 1.01), 4), quantity = pos_size_, timeInForce = 'GTC')
    order_den = client_den.new_order(symbol = simbol_, side = 'BUY', type = 'LIMIT', price = round((price_ * 1.01), 4), quantity = pos_size_, timeInForce = 'GTC')


def send_limit_order_sell(simbol_, price_, pos_size_):
    '''—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º
       price_ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
       POS_SIZE: float, –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    '''
    order_alex = client.new_order(symbol = simbol_, side = 'SELL', type = 'LIMIT', price = round((price_ / 1.01), 4), quantity = pos_size_, timeInForce = 'GTC')
    order_den = client_den.new_order(symbol = simbol_, side = 'SELL', type = 'LIMIT', price = round((price_ / 1.01), 4), quantity = pos_size_, timeInForce = 'GTC')
   

def TAKE_PROFIT_CALC_LONG(TAKE_PROFIT_PROC, price):
    take_profit = round(price * (1 + TAKE_PROFIT_PROC/100), 5)
    return take_profit

def STOP_LOSS_CALC_LONG(LOSS_PERC, price):
    stop_loss = round(price / (1 + (LOSS_PERC/100)), 5)
    return stop_loss   

def bot(search_trend_power=False, open_position=False, search_pattern = False, open_position_3_4 = False, open_position_1_2 = False, open_position_1_4 =False):
    
    logger.info(f'–ë–æ—Ç {BOT_NAME} –∑–∞–ø—É—â–µ–Ω, –≤—Ä–µ–º—è: {get_time()}')
    send_tg_message(f'{BOT_NAME} –ë–æ—Ç –∑–∞–ø—É—â–µ–ΩüöÄüöÄüöÄ, –≤—Ä–µ–º—è: {get_time()}')
    logger.info(f'–¢–æ—Ä–≥—É–µ—Ç –º–æ–Ω–µ—Ç–æ–π: {SYMBOL}')
    send_tg_message(f'{BOT_NAME} –¢–æ—Ä–≥—É–µ—Ç –º–æ–Ω–µ—Ç–æ–π: {SYMBOL}')
    logger.info(f'–û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏, –º–æ–Ω–µ—Ç: {POS_SIZE}')
    send_tg_message(f'{BOT_NAME} –û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏, –º–æ–Ω–µ—Ç: {POS_SIZE}')
    logger.info(connecting_to_market()[1])
    send_tg_message(f'{BOT_NAME} {connecting_to_market()[1]}')
    logger.info(connecting_to_market()[3])
    send_tg_message(f'{BOT_NAME} {connecting_to_market()[3]}')
    
    while Bot == True:
        qty_current = POS_SIZE # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        search_trend_power = True  # –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
      
        while search_trend_power == True:   

            df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52)  
            ##################################################################################################################### 
            trend_power = round(df_5m['trend_power'].iloc[-1], 4)
            if  df_5m['trend_power'].iloc[-1] < TREND_THRESHOLD:  # –µ—Å–ª–∏ —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞

                logger.info(f'–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, trend_power =  {trend_power}, –≤—Ä–µ–º—è: {get_time()}')
                send_tg_message(f'{BOT_NAME} –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, trend_power =  {trend_power}, –≤—Ä–µ–º—è: {get_time()}')
                search_trend_power == False # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
                search_pattern = True # –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ü–ï–†–ï–ì–ò–ë –ù–ê –†–û–°–¢ 5_–ú
                time.sleep(start_next_5m_kline()) # –ø–∞—É–∑–∞
                logger.info(f'–ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞..., –≤—Ä–µ–º—è: {get_time()}')
                send_tg_message(f'{BOT_NAME} –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞..., –≤—Ä–µ–º—è: {get_time()}')

                
                while search_pattern == True:   

                    df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52)  
                    ########################################################################################################
                    # –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—à–ª–∏ 
                    if (df_5m['trend'].iloc[-1] == 1) and (df_5m['close'].iloc[-1] > df_5m['sma'].iloc[-1]):
                        time.sleep(4)
                        ####################################################################################
                        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ma_30m
                        df_30m = get_klines(symbol = SYMBOL, interval = '30m', lookback = 52)

                        if  df_30m['trend_power'].iloc[-1] >= TREND_THRESHOLD_30m:

                            search_pattern = False # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ 
                            open_position = True # –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
                            date_entry = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—Ö–æ–¥–∞
                            price_entry = df_5m['close'].iloc[-1] # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                            price_sma = df_5m['sma'].iloc[-1] # —Ü–µ–Ω–∞ sma
                            qty_current = POS_SIZE
                            TP_1 = TAKE_PROFIT_CALC_LONG(TP_1_PROC, price_entry)  # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫–∏  
                            TP_2 = TAKE_PROFIT_CALC_LONG(TP_2_PROC, price_entry)    
                            TP_3 = TAKE_PROFIT_CALC_LONG(TP_3_PROC, price_entry)   
                            TP_4 = TAKE_PROFIT_CALC_LONG(TP_4_PROC, price_entry) 
                            stop_loss = STOP_LOSS_CALC_LONG(STOP_LOSS_PROC, price_sma)
                            # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                            send_limit_order_buy(SYMBOL, price_entry, POS_SIZE)
                            logger.info(f'–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –õ–û–ù–ì‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è –ø–æ —Ü–µ–Ω–µ {price_entry}, –≤—Ä–µ–º—è: {date_entry}')
                            send_tg_message(f'{BOT_NAME} –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –õ–û–ù–ì‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è –ø–æ —Ü–µ–Ω–µ {price_entry}, –≤—Ä–µ–º—è: {date_entry}')
                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞

                            while open_position == True:
                                
                                df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52)
                                ########################################################################################################
                                # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_1
                                if df_5m['close'].iloc[-1] > TP_1: # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_1
                                    open_position = False
                                    open_position_3_4 = True
                                    price_tp_1 = df_5m['close'].iloc[-1]
                                    date_tp_1 = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É TP_1
                                    # –∑–∞–∫—Ä—ã–≤–∞–µ–º TP_1
                                    send_limit_order_sell(SYMBOL, price_tp_1, POS_SIZE/4)
                                    qty_current -= POS_SIZE/ 4 # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–º–∞
                                    logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_1‚úÖ, –≤—Ä–µ–º—è: {date_tp_1}, —Ü–µ–Ω–∞: {price_tp_1}')
                                    send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_1‚úÖ, –≤—Ä–µ–º—è: {date_tp_1}, —Ü–µ–Ω–∞: {price_tp_1}')
                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞

                                    while open_position_3_4 == True:
                                        
                                        df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52)
                                        ########################################################################################################
                                        # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_2
                                        if df_5m['close'].iloc[-1] > TP_2: # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_2 
                                            open_position_3_4 = False
                                            open_position_1_2 = True
                                            price_tp_2 = df_5m['close'].iloc[-1]
                                            date_tp_2 = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É TP_2
                                            # –∑–∞–∫—Ä—ã–≤–∞–µ–º TP_2
                                            send_limit_order_sell(SYMBOL, price_tp_2, POS_SIZE/4)
                                            qty_current -= POS_SIZE/ 4 # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–º–∞
                                            logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_2‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_2}, —Ü–µ–Ω–∞: {price_tp_2}')
                                            send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_2‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_2}, —Ü–µ–Ω–∞: {price_tp_2}')
                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                            
                                            while open_position_1_2 == True:

                                                df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52)                                            
                                                ########################################################################################################
                                                # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_3
                                                if df_5m['close'].iloc[-1] > TP_3: # –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ—à–ª–∞ –¥–æ TP_3 
                                                    open_position_1_2 = False
                                                    open_position_1_4 = True
                                                    price_tp_3 = df_5m['close'].iloc[-1]
                                                    date_tp_3 = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É TP_3
                                                    # –∑–∞–∫—Ä—ã–≤–∞–µ–º TP_3
                                                    send_limit_order_sell(SYMBOL, price_tp_3, POS_SIZE/4)
                                                    qty_current -= POS_SIZE/ 4 # –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–º–∞
                                                    logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_3‚úÖ‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_3}, —Ü–µ–Ω–∞: {price_tp_3}')
                                                    send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_3‚úÖ‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_3}, —Ü–µ–Ω–∞: {price_tp_3}')
                                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                        
                                                    while open_position_1_4 == True:

                                                        df_5m = get_klines(symbol = SYMBOL, interval = '5m', lookback = 52) 
                                                        #######################################################################################################

                                                        if df_5m['close'].iloc[-1] > TP_4:

                                                            open_position_1_4 = False
                                                            price_tp_4 = df_5m['close'].iloc[-1] 
                                                            date_tp_4 = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É TP_4
                                                            # –∑–∞–∫—Ä—ã–≤–∞–µ–º TP_4
                                                            send_limit_order_sell(SYMBOL, price_tp_4, POS_SIZE/4)
                                                            logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_4‚úÖ‚úÖ‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_4}, —Ü–µ–Ω–∞: {price_tp_4}')
                                                            send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ TP_4‚úÖ‚úÖ‚úÖ‚úÖ, –≤—Ä–µ–º—è: {date_tp_4}, —Ü–µ–Ω–∞: {price_tp_4}')
                                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                                            break
                                                        
                                                        
                                                        
                                                        elif df_5m['close'].iloc[-1] < df_5m['sma'].iloc[-1]:

                                                            open_position_1_4 = False
                                                            price_tp_4 = df_5m['close'].iloc[-1] 
                                                            date_tp_4 = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É TP_4
                                                            # –∑–∞–∫—Ä—ã–≤–∞–µ–º sma
                                                            send_limit_order_sell(SYMBOL, price_tp_4, POS_SIZE/4)
                                                            logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ sma(TP_4)‚úÖ, –≤—Ä–µ–º—è: {date_tp_4}, —Ü–µ–Ω–∞: {price_tp_4}')
                                                            send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ sma(TP_4)‚úÖ, –≤—Ä–µ–º—è: {date_tp_4}, —Ü–µ–Ω–∞: {price_tp_4}')
                                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                                            break
                                                

                                                        elif df_5m['close'].iloc[-1] < price_entry: # —Å—Ç–æ–ø-–ª–æ—Å—Å
                                                            open_position_1_4 = False
                                                            price_stop = df_5m['close'].iloc[-1]
                                                            date_stop = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å—Ç–æ–ø–∞
                                                            # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 
                                                            send_limit_order_sell(SYMBOL, price_stop, POS_SIZE/4)
                                                            logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£üü•, –≤—Ä–µ–º—è: {date_stop}')
                                                            send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£üü•, –≤—Ä–µ–º—è: {date_stop}')
                                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                                            break
                                            

                                                        else:  
                                                            # –∏—â–µ–º TP_4
                                                            logger.info(f'–ü–æ–∏—Å–∫ TP_4, –≤—Ä–µ–º—è: {get_time()}')
                                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION)


                                                elif df_5m['close'].iloc[-1] < price_entry: # —Å—Ç–æ–ø-–ª–æ—Å—Å
                                                    open_position_1_2 = False
                                                    price_stop = df_5m['close'].iloc[-1]
                                                    date_stop = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å—Ç–æ–ø–∞
                                                    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 
                                                    send_limit_order_sell(SYMBOL, price_stop, qty_current)
                                                    logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£(TP_3)üü•, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                                    send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£(TP_3)üü•, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                                    break            


                                                elif df_5m['close'].iloc[-1] < df_5m['sma'].iloc[-1]: # —Å—Ç–æ–ø-–ª–æ—Å—Å
                                                    open_position_1_2 = False
                                                    price_stop = df_5m['close'].iloc[-1]
                                                    date_stop = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å—Ç–æ–ø–∞
                                                    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 
                                                    send_limit_order_sell(SYMBOL, price_stop, qty_current)
                                                    logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ sma(TP_3)‚úÖ, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                                    send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ sma(TP_3)‚úÖ, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                                    break
                                    

                                                else:  
                                                    # –∏—â–µ–º TP_3
                                                    logger.info(f'–ü–æ–∏—Å–∫ TP_3, –≤—Ä–µ–º—è: {get_time()}')
                                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION)

                        
                                        elif df_5m['close'].iloc[-1] < price_entry: # —Å—Ç–æ–ø-–ª–æ—Å—Å
                                            open_position_3_4 = False
                                            price_stop = df_5m['close'].iloc[-1]
                                            date_stop = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å—Ç–æ–ø–∞
                                            # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 
                                            send_limit_order_sell(SYMBOL, price_stop, qty_current)
                                            logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£(TP_2)üü•, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                            send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –ë/–£(TP_2)üü•, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                            break
                        

                                        else:  
                                            # –∏—â–µ–º TP_2
                                            logger.info(f'–ü–æ–∏—Å–∫ TP_2, –≤—Ä–µ–º—è: {get_time()}')
                                            time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION)    



                                elif df_5m['close'].iloc[-1] < stop_loss: # –µ—Å–ª–∏ –Ω–∏–∂–µ —Å—Ç–æ–ø–∞
                                    
                                    open_position = False
                                    price_stop = df_5m['close'].iloc[-1]
                                    date_stop = get_time() # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å—Ç–æ–ø–∞
                                    # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é 
                                    send_limit_order_sell(SYMBOL, price_stop, qty_current)
                                    logger.info(f'–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –°–¢–û–ü–£‚ùå, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                    send_tg_message(f'{BOT_NAME} –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ –°–¢–û–ü–£‚ùå, —Ü–µ–Ω–∞: {price_stop}, –≤—Ä–µ–º—è: {date_stop}')
                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION) # –ø–∞—É–∑–∞
                                    break                                                        
                                                                                                                                                                                            

                                                                                                    
                                else:  
                                    # –∏—â–µ–º TP_1
                                    logger.info(f'–ü–æ–∏—Å–∫ TP_1, –≤—Ä–µ–º—è: {get_time()}')
                                    time.sleep(PAUSE_BETWEEN_GET_DATA_IN_POSITION)

                        else:  
                            # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫, —Ç–∞–∫ –∫–∞–∫ –º–∞_30–º - –≤ –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–µ
                            logger.info(f'–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ - –∫–æ–Ω—Ç—Ä-—Ç—Ä–µ–Ω–¥, –≤—Ä–µ–º—è: {get_time()}')
                            send_tg_message(f'{BOT_NAME} –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ - –∫–æ–Ω—Ç—Ä-—Ç—Ä–µ–Ω–¥, –≤—Ä–µ–º—è: {get_time()}')
                            time.sleep(60)  
                            break          
                                                                                                                    

                    else:  
                        # –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
                        logger.info(f'–ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞, –≤—Ä–µ–º—è: {get_time()}')
                        time.sleep(60)

            else:
                logger.info(f'–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {trend_power}, –≤—Ä–µ–º—è: {get_time()}')
                time.sleep(start_next_5m_kline())
                # –∏—â–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –ø–∞–¥–∞—é—â–µ–≥–æ start_next_5m_kline()  


@app.route('/')
def index():
    mess_1 = "The app LONG_V3 is ready!"
    params = {'SYMBOL:' : SYMBOL,
              'TREND_THRESHOLD' : TREND_THRESHOLD,
              'PAUSE_BETWEEN_GET_DATA_IN_POSITION' : PAUSE_BETWEEN_GET_DATA_IN_POSITION,
              'TP_1_PROC' : TP_1_PROC,
              'TP_2_PROC' : TP_2_PROC,
              'TP_3_PROC' : TP_3_PROC, 
              'TP_4_PROC' : TP_4_PROC, 
              'STOP_LOSS_PROC' : STOP_LOSS_PROC,
              'POS_SIZE' : POS_SIZE}
    
    return jsonify(mess_1, params)

@app.route('/server_stop', methods=['GET'])
def stopServer():
    os.kill(os.getpid(), signal.SIGINT)
    return jsonify({ "success": True, "message": "Server is shutting down..." })

@app.route('/change_value?TP_1_PROC', methods=['GET', 'POST'])
def change_value():
    TP_1_PROC = request.args.get('TP_1_PROC')
    return logger.info(f'–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {TP_1_PROC}')


@app.route('/bot_run')
def bot_run():

    try:
        bot(search_trend_power=False, open_position=False, search_pattern = False, open_position_3_4 = False, open_position_1_2 = False, open_position_1_4 =False)
    except:
        logger.info(f'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è, –≤—Ä–µ–º—è: {get_time()}') 
        send_tg_message(f'{BOT_NAME} –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è, –≤—Ä–µ–º—è: {get_time()}')   


if __name__ == '__main__':
    app.run(host='0.0.0.0', port = 100, debug=True)                